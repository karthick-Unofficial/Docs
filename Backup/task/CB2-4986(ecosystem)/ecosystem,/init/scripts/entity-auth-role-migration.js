const provider = require("../../lib/rethinkdbProvider");
const config = require("../../config");
const r = provider.r;

module.exports.applyScript = async function () {
	try {
		// Create tables to support new role model
		const tables = ["sys_roleApplication", "sys_roleIntegration"];
		const tableList = await r.tableList().run();

		for (let i = 0; i < tables.length; i++) {
			const table = tables[i];
			if (!tableList.includes(table)) {
				const tc = config.tableConfig || {};
				const ctResult = await r.tableCreate(table, tc).run();
				console.log(`Created table ${table}`, tc, ctResult);
			}
		}

		// create admin/non-admin roles for each existing org
		const orgs = await r.table("sys_organization").run();

		// remove existing roles
		await r.table("sys_orgRoles").delete().run();

		// create new roles for each org
		const roles = [
			{ roleId: "org_admin", title: "Org Admin" },
			{ roleId: "org_user", title: "Org User" }
		];
		const insertOrgRoles = [];
		const insertRoleApplication = [], 
			  insertRoleIntegration = [];
		for(const org of orgs) {
			const orgId = org.orgId;
			for(const role of roles) {
				// todo: ecosystem and organization are temp until dependencies are removed from ui
				insertOrgRoles.push({
					...{
						"id": `${orgId}_${role.roleId}`,
						"lastModifiedDate": new Date(),
						"orgId": orgId,
						"ecosystem": {
							"canContribute": true,
							"canShare": true,
							"canView": true
						  },
						  "organization": {
							"canContribute": true,
							"canEdit": true,
							"canShare": true,
							"canView": true
						  },
						"initialRole": true
					}, 
					...role
				});
			}
            
			// for each org iterate over orgApplication and create entries for sys_roleApplication / joim sys_application to get permission options, add all for org admin, org user permisisons will be empty array (none)
			// for each org iterate over orgIntegration and create entries for sys_roleIntegration / join feed and then entity type and do same for integrations
			const orgApplications = await r.table("sys_orgApplication")
				.filter({ "orgId": orgId })
				.merge((row) => {
					return r.table("sys_application")
						.filter({ "appId": row("appId") })(0);
				});
                
            
			for(const orgApp of orgApplications) {
				insertRoleApplication.push({
					"config": {
						"canView": true,
						"role": "viewer"
					},
					"appId": orgApp.appId,
					"permissions": orgApp.permissionOptions,
					"roleId": `${orgId}_org_admin`
				});
				insertRoleApplication.push({
					"config": {
						"canView": true,
						"role": "viewer"
					},
					"appId": orgApp.appId,
					"permissions": [],
					"roleId": `${orgId}_org_user`
				});
			}

			const orgIntegrations = await r.table("sys_orgIntegration")
				.filter({ "orgId": orgId })
				.merge((row) => {
					return r.table("sys_feedTypes")
						.filter({ "feedId": row("intId") })(0)
						.without("id");
				})
				.merge((row) => {
					return r.table("sys_entityType")
						.filter({ "name": row("entityType") })(0)
						.without("id");
				});

			// -- Todo: Policy is currently on userIntegration but will not include in role integration
			// --       So need to make sure policy is derived from orgIntegration in userPolicyCache for evaluating policy

			// -- id remove requirment to include feedId and just let them be autogenerated
			// {
			//     "config": {
			//       "canView": true,
			//       "role": "viewer"
			//     },
			//     "feedOwnerOrg": "ares_security_corporation",
			//     "id": "2c9c0362-345b-4f33-9976-219a4566b9c3_cameras", [auto generated don't append feedId]
			//     "intId": "cameras",
			//     "lastModifiedDate": "2020-02-27T19:10:42.730Z",
			//     "orgIntId": "ares_security_corporation_cameras",
			//     "permissions": [
			//       "manage",
			//       "control"
			//     ],
			//     "policy": {
			//       "type": "owner"
			//     },
			//     "userId": "2c9c0362-345b-4f33-9976-219a4566b9c3"
			// }

			for(const orgInt of orgIntegrations) {
				insertRoleIntegration.push({
					"config": {
						"canView": true,
						"role": "viewer"
					},
					"intId": orgInt.intId,
					"orgIntId": orgInt.id,
					"permissions": orgInt.permissionOptions,
					"roleId": `${orgId}_org_admin`,
					"feedOwnerOrg": orgInt.feedOwnerOrg,
					"lastModifiedDate": new Date()
				});
				insertRoleIntegration.push({
					"config": {
						"canView": true,
						"role": "viewer"
					},
					"intId": orgInt.intId,
					"orgIntId": orgInt.id,
					"permissions": [],
					"roleId": `${orgId}_org_user`,
					"feedOwnerOrg": orgInt.feedOwnerOrg,
					"lastModifiedDate": new Date()
				});
			}
    

		}
		const insertRolesResult = await r.table("sys_orgRoles").insert(insertOrgRoles).run();
		if(insertRolesResult.inserted !== insertOrgRoles.length) {
			// throw error and let handler return with err message
			throw { message: "problem encountered inserting org roles", result: insertRolesResult };
		}

		const insertRoleAppsResult = await r.table("sys_roleApplication").insert(insertRoleApplication).run();
		if(insertRoleAppsResult.inserted !== insertRoleApplication.length) {
			throw { message: "problem encountered inserting role applications", result: insertRoleAppsResult };
		}

		const insertRoleIntsResult = await r.table("sys_roleIntegration").insert(insertRoleIntegration).run();
		if(insertRoleIntsResult.inserted !== insertRoleIntegration.length) {
			throw { message: "problem encountered inserting role integrations", result: insertRoleIntsResult };
		}

        
		// update roleId on user based on admin true/false
		const updateAdminUsersRoleIdResult = await r.table("sys_user")
			.filter({ "admin": true })
			.update({ "roleId": r.add(r.row("orgId"), "_org_admin") });
        
		if(updateAdminUsersRoleIdResult.errors > 0) {
			throw { message: "errors encountered setting roleId for admin users", result: updateAdminUsersRoleIdResult };
		}

		const updateNonAdminUsersRoleIdResult = await r.table("sys_user")
			.filter({ "admin": false })
			.update({ "roleId": r.add(r.row("orgId"), "_org_user") });

		if(updateNonAdminUsersRoleIdResult.errors > 0) {
			throw { message: "errors encountered setting roleId for non-admin users", result: updateNonAdminUsersRoleIdResult };
		}
        
		await r.tableDrop("sys_userApplication").run();
		await r.tableDrop("sys_userIntegration").run();
    
		return {"success": true};
	}
	catch(err) {
		console.log("There was an error with entity-auth-role-migration script: ", err);
		return {
			"success": false,
			err
		};
	}
};