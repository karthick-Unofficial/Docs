const rulesApp = {
en: {
    alertGenerator: {
      alertFields: {
        summary: "Summary*"
      },
      alertTable: {
        emails: "Emails",
        priority: "Priority",
        system: "System",
        whoGetsAlert: "Who gets alerts?"
      },
      escalationEvent: {
        title: "Escalation Event"
      },
      locationSelection: {
        lat: "Lat",
        location: "Location",
        lon: "Lon"
      },
      main: {
        demoAlert: "Demo Alert",
        loiterRule: "Loiter Rule",
        zoneEntry: "Zone Entry",
        zoneExit: "Zone Exit"
      },
      objectSelection: {
        object: "Object"
      },
      searchField: {
        search: "Search..."
      },
      submitControls: {
        generate: "Generate",
        reset: "Reset"
      },
      targetSelection: {
        target: "Target"
      }
    },
    appBar: {
      title: "Rules"
    },
    createEditRule: {
      alarm: {
        chooseAlarmSubType: "Choose an alarm sub-type to filter by. (optional)",
        chooseAlarmType: "Choose an alarm type to filter by.",
        chooseFeed: "Choose a feed to monitor.",
        ruleStates: "The rule states..."
      },
      components: {
        alertTable: {
          emails: "Emails",
          priority: "Priority",
          system: "System",
          whoGetsAlert: "Who gets alerts?"
        },
        audioSettings: {
          example: "Example: Alert, Alert: A violation has occurred in Main Security Zone.",
          note: "Note: If both above options are selected the entire alert notification text will be appended to the user entered alert text.",
          selectingThisRule: "Selecting this option will speak entire alert notification text from alarm rule above.",
          speakAlertNotification: "Speak alert notification text",
          speakAlertText: "Speak alert text"
        },
        dismissSettings: {
          dismissAlertsForAll: "Dismiss alerts for all users in the Organization",
          dismissAlertsUser: "Dismiss alerts by user",
          useForEntireOrg: "Use this option to allow any subscribed user to dismiss Priority or System alerts for the entire organization.",
          useToSubscIndividually: "Use this option to allow any subscribed user to dismiss Priority or System alerts individually."
        },
        ruleFields: {
          descNotes: "Description/Notes (optional)",
          ruleName: "Rule name*"
        },
        submitControls: {
          cancel: "Cancel",
          save: "Save"
        }
      },
      conditions: {
        conditionDialog: {
          add: "Add",
          addCondition: "ADD CONDITION",
          allDay: "All Day",
          cancel: "Cancel",
          dateRange: "DATE RANGE :",
          days: "DAYS :",
          dialogError: {
            atleastOneDay: "You must select at least one day of the week for the condition to be active.",
            atleastOneLimitingFactor: "Your condition must have at least one limiting factor.",
            fallAfterStart: "Your end date must fall after your selected start date.",
            fasterThanGreater: "Traveling faster than speed must be greater than traveling slower than speed",
            onlyOneAllowed: "Only one time condition is allowed per rule.",
            onlyOneDuration: "Only one duration condition is allowed per rule.",
            selectAColl: "Please select a collection.",
            slowerFasterThanVal: "Please enter either a traveling slower than speed or traveling faster than speed value",
            startBeforeEndTime: "The start time must be before the end time.",
            startEndTimeDiff: "The start time and end time must be different.",
            validTimeValue: "Please enter a valid time value."
          },
          duration: "Duration",
          inCollection: "In Collection...",
          indefinite: "Indefinite",
          minute: "minute",
          minutes: "minutes",
          notInCollection: "Not In Collection...",
          selectCollection: "Select a Collection",
          selectCondition: "Select a Condition",
          setPeriod: "Set Period",
          setRange: "Set Range",
          speed: "Speed",
          time: "Time",
          timeAllowed: "Time Allowed",
          timePeriod: "TIME PERIOD :",
          to: "to",
          travellingFasterThan: "Traveling faster than:",
          travellingSlowerThan: "Traveling slower than:",
          unit: "Unit",
          update: "Update"
        },
        main: {
          addACondition: "Add a condition...",
          addAnother: "Add another...",
          addCondition: "Add condition",
          cancel: "Cancel",
          condition: "%{count} Condition",
          inCollection: "In Collection (%{count})",
          notInCollection: "Not In Collection (%{count})",
          title: "Conditions"
        }
      },
      createEvent: {
        eventSubType: "Choose an event subtype to monitor.",
        eventTemplate: "Choose an event template to monitor.",
        eventType: "Choose an event type to monitor.",
        ruleStates: "The rule states..."
      },
      escalations: {
        chooseTemp: "Choose a Template...",
        escalationDialog: {
          add: "Add",
          cancel: "Cancel",
          noEventTemp: "You do not have any event templates. Please create an event template to select.",
          wantToFind: "I want to find..."
        },
        title: "Escalation Event"
      },
      genericAttribute: {
        multiSelection: {
          addAnother: "Add another...",
          addDynamic: "Add %{count}...",
          multiSelectionDialog: {
            addItem: "Add item",
            cancel: "Cancel",
            wantToFind: "I want to find..."
          }
        },
        singleSelection: {
          addDynamic: "Add %{count}...",
          singleSelectionDialog: {
            addItem: "Add item",
            cancel: "Cancel",
            wantToFind: "I want to find..."
          }
        }
      },
      main: {
        errorText: {
          alertTextReq: "Alert text is required if the speak alert text option is selected.",
          atLeastTwo: "At least one of the 2 options must be selected."
        }
      },
      subject: {
        subjectAttributes: {
          addAnother: "Add another...",
          addEntity: "Add an entity...",
          addFeed: "Add feed filter",
          anyTrack: "Any track",
          editFeed: "Edit feed filter",
          selectTracks: "Select track(s)",
          title: "Subject",
          tracks: "Track(s) that can commit the trigger."
        },
        subjectDialog: {
          addItem: "Add item(s)",
          cancel: "Cancel",
          errorOccured: "An error has occured.",
          searchField: {
            searchTracks: "Search tracks..."
          },
          wantToFind: "I want to find..."
        },
        subjectFeedDialog: {
          addItem: "Add item(s)",
          cancel: "Cancel",
          noAdditional: "No additional feeds available.",
          noFeeds: "No feeds available."
        }
      },
      systemHealth: {
        ruleStates: "The rule states..."
      },
      trackMovement: {
        ruleStates: "The rule states..."
      },
      trigger: {
        actionThatFires: "The action that fires the alert.",
        addAnother: "Add another...",
        anyDynamic: "Any %{count}",
        anyDynamicdots: "Any %{count}...",
        anyLine: "Any line",
        selectDynamic: "Select %{count}(s)",
        selectLine: "Select line",
        triggerDialog: {
          addItem: "Add item(s)",
          cancel: "Cancel",
          errorOccured: "An error has occured.",
          wantToFind: "I want to find..."
        }
      },
      vesselEvents: {
        ruleStates: "The rule states...",
        selectBerth: "Select berths.",
        selectRuleType: "Select a rule type."
      }
    },
    main: {
      components: {
        ruleItem: {
          actions: {
            label: {
              cancel: "Cancel",
              unsubscribe: "Unsubscribe"
            }
          },
          ruleItem: {
            priority: "priority"
          },
          unsubscribeTarget: {
            dialog: {
              children: "Are you sure you want to unsubscribe from %{count}?",
              title: "UNSUBSCRIBE?"
            },
            unsbuscribe: "UNSUBSCRIBE"
          }
        }
      },
      mainJsx: {
        actions: {
          label: {
            cancel: "Cancel",
            delete: "Yes, Delete"
          }
        },
        createButton: {
          createNewRule: "Create New Rule ‚è∑"
        },
        rulesFilters: {
          dialog: {
            content: "Are you sure you want to delete this rule?",
            title: "DELETE RULE"
          },
          filterBy: "Filter By...",
          listItem: {
            createdby: {
              primaryText: "Created By"
            },
            triggerList: {
              nestedItems: {
                checkbox: {
                  label: {
                    arrivals: "Arrivals",
                    berthUpdates: "Berth Updates",
                    cross: "Cross",
                    departures: "Departures",
                    enter: "Enter",
                    exit: "Exit",
                    loiter: "Loiter",
                    newRequest: "New Request",
                    requestApproval: "Request Approval",
                    securityViolations: "Security Violations"
                  }
                }
              },
              primaryText: "Trigger"
            }
          },
          rulesAreas: {
            TypeAheadFilterContainer: {
              placeholder: "I want to find..."
            },
            rulesSectionWrapper: {
              noRules: "There are no rules subscriptions shared with you at the moment.",
              ruleSectionTitle: "Rule I created (%{count})",
              ruleShared: "Rule shared with me (%{count})",
              rulesContainer: "There are no rules subscriptions shared with you at the moment.",
              rulesSectionTitle: "Rules I created (%{count})",
              rulesShared: "Rules shared with me (%{count})"
            }
          }
        },
        rulesOptions: {
          label: {
            alarmRule: "Alarm Rule",
            eventCreated: "Event Created",
            trackMovement: "Track Movement",
            vesselEventRule: "Vessel Event Rule"
          }
        }
      }
    },
    viewRule: {
      actions: {
        flatButtonLabel: {
          cancel: "Cancel",
          yesDelete: "Yes, Delete"
        }
      },
      alertAudio: {
        alert: "Alert Alert",
        followedBy: "followed by alert notification text.",
        speak: "Speak ",
        speakAlert: "Speak alert notification text."
      },
      alertTable: {
        alertAudio: "Alert Audio",
        alertDismissRule: "Alert Dismiss Rule",
        raisedButton: {
          save: "Save"
        },
        tbody: {
          unsharedRuleMessage: {
            rule: "This rule is not currently being shared with other users.",
            whoGetsAlerts: "Who gets alerts?"
          }
        },
        thead: {
          emails: "Emails",
          priority: "Priority",
          system: "System",
          whoGetsAlerts: "Who gets alerts?"
        }
      },
      dialog: {
        content: "Are you sure you want to delete this rule?",
        title: "DELETE RULE"
      },
      dismissText: {
        dismissAlertsOrg: "Dismiss alerts for all users in the Organization.",
        dismissAlertsUser: "Dismiss alerts by user."
      },
      ruleOperations: {
        delete: "Delete",
        edit: "Edit"
      },
      ruleStates: {
        theRuleStates: "The rule states..."
      },
      viewRuleAttribute: {
        alertDismissRule: "Alert Dismiss Rule"
      },
      viewTitling: {
        createdBy: "Created by %{count}"
      }
    }
  },
  ar: {
    alertGenerator: {
      alertFields: {
        summary: "ŸÖŸàÿ¨ÿ≤*"
      },
      alertTable: {
        emails: "ÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä",
        priority: "ÿ£ŸÅÿ∂ŸÑŸäÿ©",
        system: "ŸÜÿ∏ÿßŸÖ",
        whoGetsAlert: "ŸÖŸÜ ÿßŸÑÿ∞Ÿä Ÿäÿ™ŸÑŸÇŸâ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ÿü"
      },
      escalationEvent: {
        title: "ÿ≠ÿØÿ´ ÿßŸÑÿ™ÿµÿπŸäÿØ"
      },
      locationSelection: {
        lat: "ÿÆÿ∑ ÿßŸÑÿπÿ±ÿ∂",
        location: "ŸÖŸàŸÇÿπ",
        lon: "ÿÆÿ∑ ÿßŸÑÿ∑ŸàŸÑ"
      },
      main: {
        demoAlert: "ÿ™ŸÜÿ®ŸäŸá ÿ™ÿ¨ÿ±Ÿäÿ®Ÿä",
        loiterRule: "ŸÇÿßÿπÿØÿ© ÿßŸÑÿ™ÿ≥ŸÉÿπ",
        zoneEntry: "ÿØÿÆŸàŸÑ ÿßŸÑŸÖŸÜÿ∑ŸÇÿ©",
        zoneExit: "ÿÆÿ±Ÿàÿ¨ ÿßŸÑŸÖŸÜÿ∑ŸÇÿ©"
      },
      objectSelection: {
        object: "ŸÉÿßÿ¶ŸÜ"
      },
      searchField: {
        search: "ÿ®ÿ≠ÿ´..."
      },
      submitControls: {
        generate: "ÿ™ŸàŸÑŸäÿØ",
        reset: "ÿ•ÿπÿßÿØÿ© ÿ∂ÿ®ÿ∑"
      },
      targetSelection: {
        target: "ÿßÿ≥ÿ™ŸáÿØÿßŸÅ"
      }
    },
    appBar: {
      title: "ŸÇŸàÿßÿπÿØ"
    },
    createEditRule: {
      alarm: {
        chooseAlarmSubType: "ÿßÿÆÿ™ÿ± ŸÜŸàÿπŸãÿß ŸÅÿ±ÿπŸäŸãÿß ŸÑŸÑÿ•ŸÜÿ∞ÿßÿ± ŸÑŸÑÿ™ÿµŸÅŸäÿ© ŸàŸÅŸÇŸãÿß ŸÑŸá. (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)",
        chooseAlarmType: "ÿßÿÆÿ™ÿ± ŸÜŸàÿπ ÿßŸÑÿ™ŸÜÿ®ŸäŸá ŸÑŸÑÿ™ÿµŸÅŸäÿ© ŸÖŸÜ ÿÆŸÑÿßŸÑŸá.",
        chooseFeed: "ÿßÿÆÿ™ÿ± ÿ™ÿ∫ÿ∞Ÿäÿ© ŸÑŸÖÿ±ÿßŸÇÿ®ÿ™Ÿáÿß.",
        ruleStates: "ÿ™ŸÜÿµ ÿßŸÑŸÇÿßÿπÿØÿ© ..."
      },
      components: {
        alertTable: {
          emails: "ÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä",
          priority: "ÿ£ŸÅÿ∂ŸÑŸäÿ©",
          system: "ŸÜÿ∏ÿßŸÖ",
          whoGetsAlert: "ŸÖŸÜ ÿßŸÑÿ∞Ÿä Ÿäÿ™ŸÑŸÇŸâ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ÿü"
        },
        audioSettings: {
          example: "ŸÖÿ´ÿßŸÑ: ÿ™ŸÜÿ®ŸäŸá ÿå ÿ™ŸÜÿ®ŸäŸá: ÿ≠ÿØÿ´ ÿßŸÜÿ™ŸáÿßŸÉ ŸÅŸä ŸÖŸÜÿ∑ŸÇÿ© ÿßŸÑÿ£ŸÖÿßŸÜ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©.",
          note: "ŸÖŸÑÿßÿ≠ÿ∏ÿ©: ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ ŸÉŸÑÿß ÿßŸÑÿÆŸäÿßÿ±ŸäŸÜ ÿ£ÿπŸÑÿßŸá ÿå ŸÅÿ≥Ÿäÿ™ŸÖ ÿ•ŸÑÿ≠ÿßŸÇ ŸÜÿµ ÿ™ŸÜÿ®ŸäŸá ÿßŸÑÿ™ŸÜÿ®ŸäŸá ÿ®ÿ£ŸÉŸÖŸÑŸá ÿ®ŸÜÿµ ÿßŸÑÿ™ŸÜÿ®ŸäŸá ÿßŸÑÿ∞Ÿä ÿ£ÿØÿÆŸÑŸá ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ.",
          selectingThisRule: "ÿ≥Ÿäÿ§ÿØŸä ÿ™ÿ≠ÿØŸäÿØ Ÿáÿ∞ÿß ÿßŸÑÿÆŸäÿßÿ± ÿ•ŸÑŸâ ŸÜÿ∑ŸÇ ŸÜÿµ ÿ•ÿ¥ÿπÿßÿ± ÿßŸÑÿ™ŸÜÿ®ŸäŸá ÿ®ÿßŸÑŸÉÿßŸÖŸÑ ŸÖŸÜ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ™ŸÜÿ®ŸäŸá ÿ£ÿπŸÑÿßŸá.",
          speakAlertNotification: "ŸÜÿ∑ŸÇ ŸÜÿµ ÿ•ÿ¥ÿπÿßÿ± ÿßŸÑÿ™ŸÜÿ®ŸäŸá",
          speakAlertText: "ŸÜÿ∑ŸÇ ŸÜÿµ ÿßŸÑÿ™ŸÜÿ®ŸäŸá"
        },
        dismissSettings: {
          dismissAlertsForAll: "ÿ±ŸÅÿ∂ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ŸÅŸä ÿßŸÑŸÖÿ§ÿ≥ÿ≥ÿ©",
          dismissAlertsUser: "ÿ±ŸÅÿ∂ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ ŸÖŸÜ ŸÇÿ®ŸÑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ",
          useForEntireOrg: "ÿßÿ≥ÿ™ÿÆÿØŸÖ Ÿáÿ∞ÿß ÿßŸÑÿÆŸäÿßÿ± ŸÑŸÑÿ≥ŸÖÿßÿ≠ ŸÑÿ£Ÿä ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ¥ÿ™ÿ±ŸÉ ÿ®ÿ±ŸÅÿ∂ ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ£ŸàŸÑŸàŸäÿ© ÿ£Ÿà ÿßŸÑŸÜÿ∏ÿßŸÖ ŸÑŸÑŸÖÿ§ÿ≥ÿ≥ÿ© ÿ®ÿ£ŸÉŸÖŸÑŸáÿß.",
          useToSubscIndividually: "ÿßÿ≥ÿ™ÿÆÿØŸÖ Ÿáÿ∞ÿß ÿßŸÑÿÆŸäÿßÿ± ŸÑŸÑÿ≥ŸÖÿßÿ≠ ŸÑÿ£Ÿä ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ¥ÿ™ÿ±ŸÉ ÿ®ÿ±ŸÅÿ∂ ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ£ŸàŸÑŸàŸäÿ© ÿ£Ÿà ÿßŸÑŸÜÿ∏ÿßŸÖ ÿ®ÿ¥ŸÉŸÑ ŸÅÿ±ÿØŸä."
        },
        ruleFields: {
          descNotes: "ÿßŸÑŸàÿµŸÅ / ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)",
          ruleName: "ÿßÿ≥ŸÖ ÿßŸÑŸÇÿßÿπÿØÿ©*"
        },
        submitControls: {
          cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
          save: "ÿ≠ŸÅÿ∏"
        }
      },
      conditions: {
        conditionDialog: {
          add: "ÿ£ÿ∂ŸÅ",
          addCondition: "ÿ£ÿ∂ŸÅ ÿßŸÑÿ¥ÿ±ÿ∑",
          allDay: "ÿ∑ŸàÿßŸÑ ÿßŸÑŸäŸàŸÖ",
          cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
          dateRange: "ŸÜÿ∑ÿßŸÇ ÿßŸÑÿ™ÿßÿ±ŸäÿÆ :",
          days: "ÿ£ŸäÿßŸÖ:",
          dialogError: {
            atleastOneDay: "Ÿäÿ¨ÿ® ÿ™ÿ≠ÿØŸäÿØ ŸäŸàŸÖ Ÿàÿßÿ≠ÿØ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ ŸÖŸÜ ÿ£ŸäÿßŸÖ ÿßŸÑÿ£ÿ≥ÿ®Ÿàÿπ ÿ≠ÿ™Ÿâ ÿ™ŸÉŸàŸÜ ÿßŸÑÿ≠ÿßŸÑÿ© ŸÜÿ¥ÿ∑ÿ©.",
            atleastOneLimitingFactor: "Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ŸÑÿ≠ÿßŸÑÿ™ŸÉ ÿπÿßŸÖŸÑ ŸÖŸÇŸäÿØ Ÿàÿßÿ≠ÿØ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ.",
            fallAfterStart: "Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÇÿπ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßŸÜÿ™Ÿáÿßÿ° ÿ®ÿπÿØ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ®ÿØÿ° ÿßŸÑŸÖÿ≠ÿØÿØ.",
            fasterThanGreater: "Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ÿ≥ÿ±ÿπÿ© ÿßŸÑÿ≥ŸÅÿ± ÿ£ÿ≥ÿ±ÿπ ŸÖŸÜ ÿ£ŸÉÿ®ÿ± ŸÖŸÜ ÿ≥ÿ±ÿπÿ© ÿßŸÑÿ≥ŸÅÿ± ÿ£ÿ®ÿ∑ÿ£ ŸÖŸÜ",
            onlyOneAllowed: "Ÿäÿ≥ŸÖÿ≠ ŸÅŸÇÿ∑ ÿ®ÿ¥ÿ±ÿ∑ ŸÖÿ±ÿ© Ÿàÿßÿ≠ÿØÿ© ŸÑŸÉŸÑ ŸÇÿßÿπÿØÿ©.",
            onlyOneDuration: "ŸäŸèÿ≥ŸÖÿ≠ ÿ®ÿ¥ÿ±ÿ∑ ŸÖÿØÿ© Ÿàÿßÿ≠ÿØÿ© ŸÅŸÇÿ∑ ŸÑŸÉŸÑ ŸÇÿßÿπÿØÿ©.",
            selectAColl: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ŸÖÿ¨ŸÖŸàÿπÿ©.",
            slowerFasterThanVal: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ŸÇŸäŸÖÿ© ÿßŸÑÿ≥ÿ±ÿπÿ© ÿßŸÑÿ≥ŸÅÿ± ÿ£ÿ®ÿ∑ÿ£ ŸÖŸÜ ÿßŸÑÿ≥ÿ±ÿπÿ© ÿ£Ÿà ÿßŸÑÿ≥ŸÅÿ± ÿ£ÿ≥ÿ±ÿπ ŸÖŸÜ",
            startBeforeEndTime: "Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ŸàŸÇÿ™ ÿßŸÑÿ®ÿØÿ° ŸÇÿ®ŸÑ ŸàŸÇÿ™ ÿßŸÑÿßŸÜÿ™Ÿáÿßÿ°.",
            startEndTimeDiff: "Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ŸàŸÇÿ™ ÿßŸÑÿ®ÿØÿ° ŸàŸàŸÇÿ™ ÿßŸÑÿßŸÜÿ™Ÿáÿßÿ° ŸÖÿÆÿ™ŸÑŸÅŸäŸÜ.",
            validTimeValue: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ŸÇŸäŸÖÿ© ŸàŸÇÿ™ ÿµÿßŸÑÿ≠ÿ©."
          },
          duration: "Duration",
          inCollection: "ŸÅŸä ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© ...",
          indefinite: "ŸÑÿ£ÿ¨ŸÑ ÿ∫Ÿäÿ± ŸÖÿ≥ŸÖŸâ",
          minute: "ÿØŸÇŸäŸÇÿ©",
          minutes: "ÿßŸÑÿØŸÇÿßÿ¶ŸÇ",
          notInCollection: "ŸÑŸäÿ≥ ŸÅŸä ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© ...",
          selectCollection: "ÿ≠ÿØÿØ ŸÖÿ¨ŸÖŸàÿπÿ©",
          selectCondition: "ÿ≠ÿØÿØ ÿßŸÑÿ¥ÿ±ÿ∑",
          setPeriod: "ÿ™ÿπŸäŸäŸÜ ÿßŸÑŸÅÿ™ÿ±ÿ©",
          setRange: "ŸÖÿ¨ŸÖŸàÿπÿ© ŸÖÿ¨ŸÖŸàÿπÿ©",
          speed: "ÿ≥ÿ±ÿπÿ©",
          time: "ÿ≤ŸÖŸÜ",
          timeAllowed: "ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖÿ≥ŸÖŸàÿ≠ ÿ®Ÿá",
          timePeriod: "ŸÅÿ™ÿ±ÿ© ÿ≤ŸÖŸÜŸäÿ©:",
          to: "ÿ•ŸÑŸâ",
          travellingFasterThan: "ÿßŸÑÿ≥ŸÅÿ± ÿ£ÿ≥ÿ±ÿπ ŸÖŸÜ:",
          travellingSlowerThan: "ÿßŸÑÿ≥ŸÅÿ± ÿ£ÿ®ÿ∑ÿ£ ŸÖŸÜ:",
          unit: "Ÿàÿ≠ÿØÿ©",
          update: "ÿ™ÿ≠ÿØŸäÿ´"
        },
        main: {
          addACondition: "ÿ•ÿ∂ÿßŸÅÿ© ÿ¥ÿ±ÿ∑ ...",
          addAnother: "ÿ£ÿ∂ŸÅ ÿ¢ÿÆÿ±...",
          addCondition: "ÿ£ÿ∂ŸÅ ÿßŸÑÿ¥ÿ±ÿ∑",
          cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
          condition: "%{count} ÿ≠ÿßŸÑÿ©",
          inCollection: "ŸÅŸä ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© (%{count})",
          notInCollection: "ŸÑŸäÿ≥ ŸÅŸä ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© (%{count})",
          title: "ÿßŸÑÿ¥ÿ±Ÿàÿ∑"
        }
      },
      createEvent: {
        eventSubType: "ÿßÿÆÿ™ÿ± ŸÜŸàÿπ ÿßŸÑÿ≠ÿØÿ´ ÿßŸÑŸÅÿ±ÿπŸä ŸÑŸÖÿ±ÿßŸÇÿ®ÿ™Ÿá.",
        eventTemplate: "ÿßÿÆÿ™ÿ± ŸÇÿßŸÑÿ® ÿ≠ÿØÿ´ ŸÑŸÖÿ±ÿßŸÇÿ®ÿ™Ÿá.",
        eventType: "ÿßÿÆÿ™ÿ± ŸÜŸàÿπ ÿßŸÑÿ≠ÿØÿ´ ÿßŸÑŸÖÿ±ÿßÿØ ŸÖÿ±ÿßŸÇÿ®ÿ™Ÿá.",
        ruleStates: "ÿ™ŸÜÿµ ÿßŸÑŸÇÿßÿπÿØÿ© ..."
      },
      escalations: {
        chooseTemp: "ÿßÿÆÿ™ÿ± ŸÇÿßŸÑÿ®Ÿãÿß ...",
        escalationDialog: {
          add: "ÿ£ÿ∂ŸÅ",
          cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
          noEventTemp: "ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿ£Ÿä ŸÇŸàÿßŸÑÿ® ŸÑŸÑÿ£ÿ≠ÿØÿßÿ´. Ÿäÿ±ÿ¨Ÿâ ÿ•ŸÜÿ¥ÿßÿ° ŸÇÿßŸÑÿ® ÿßŸÑÿ≠ÿØÿ´ ŸÑŸÑÿ™ÿ≠ÿØŸäÿØ.",
          wantToFind: "ÿßŸÜÿß ÿßÿ±ŸäÿØ ÿßŸÜ ÿßÿ¨ÿØ..."
        },
        title: "ÿ≠ÿØÿ´ ÿßŸÑÿ™ÿµÿπŸäÿØ"
      },
      genericAttribute: {
        multiSelection: {
          addAnother: "ÿ£ÿ∂ŸÅ ÿ¢ÿÆÿ±...",
          addDynamic: "Ÿäÿ∂ŸäŸÅ %{count}...",
          multiSelectionDialog: {
            addItem: "ÿßÿ∂ÿßŸÅÿ© ÿπŸÜÿµÿ±",
            cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
            wantToFind: "ÿßŸÜÿß ÿßÿ±ŸäÿØ ÿßŸÜ ÿßÿ¨ÿØ..."
          }
        },
        singleSelection: {
          addDynamic: "Ÿäÿ∂ŸäŸÅ %{count}...",
          singleSelectionDialog: {
            addItem: "ÿßÿ∂ÿßŸÅÿ© ÿπŸÜÿµÿ±",
            cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
            wantToFind: "ÿßŸÜÿß ÿßÿ±ŸäÿØ ÿßŸÜ ÿßÿ¨ÿØ..."
          }
        }
      },
      main: {
        errorText: {
          alertTextReq: "ŸÜÿµ ÿßŸÑÿ™ŸÜÿ®ŸäŸá ŸÖÿ∑ŸÑŸàÿ® ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ ÿÆŸäÿßÿ± ŸÜÿµ ÿßŸÑÿ™ŸÜÿ®ŸäŸá.",
          atLeastTwo: "Ÿäÿ¨ÿ® ÿ™ÿ≠ÿØŸäÿØ ÿÆŸäÿßÿ± Ÿàÿßÿ≠ÿØ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ ŸÖŸÜ ÿßŸÑÿÆŸäÿßÿ±ŸäŸÜ."
        }
      },
      subject: {
        subjectAttributes: {
          addAnother: "ÿ£ÿ∂ŸÅ ÿ¢ÿÆÿ±...",
          addEntity: "ÿ•ÿ∂ÿßŸÅÿ© ŸÉŸäÿßŸÜ ...",
          addFeed: "ÿ£ÿ∂ŸÅ ŸÖÿ±ÿ¥ÿ≠ ÿßŸÑÿ™ÿ∫ÿ∞Ÿäÿ©",
          anyTrack: "ÿ£Ÿä ŸÖÿ≥ÿßÿ±",
          editFeed: "ÿ™ÿ≠ÿ±Ÿäÿ± ŸÖÿ±ÿ¥ÿ≠ ÿßŸÑÿ™ÿ∫ÿ∞Ÿäÿ©",
          selectTracks: "ÿ≠ÿØÿØ ÿßŸÑŸÖÿ≥ÿßÿ± (ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™)",
          title: "ÿßŸÑŸÖŸàÿ∂Ÿàÿπ",
          tracks: "ÿßŸÑŸÖÿ≥ÿßÿ± (ŸÇ) ÿßŸÑÿ™Ÿä ŸäŸÖŸÉŸÜ ÿ£ŸÜ ÿ™ÿ±ÿ™ŸÉÿ® ÿßŸÑÿ≤ŸÜÿßÿØ."
        },
        subjectDialog: {
          addItem: "ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÜÿßÿµÿ±",
          cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
          errorOccured: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£.",
          searchField: {
            searchTracks: "ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ..."
          },
          wantToFind: "ÿßŸÜÿß ÿßÿ±ŸäÿØ ÿßŸÜ ÿßÿ¨ÿØ..."
        },
        subjectFeedDialog: {
          addItem: "ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÜÿßÿµÿ±",
          cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
          noAdditional: "ŸÑÿß Ÿäÿ∫ÿ∞Ÿä ÿ•ÿ∂ÿßŸÅŸäÿ© ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©.",
          noFeeds: "ŸÑÿß Ÿäÿ∫ÿ∞Ÿä ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©."
        }
      },
      systemHealth: {
        ruleStates: "ÿ™ŸÜÿµ ÿßŸÑŸÇÿßÿπÿØÿ© ..."
      },
      trackMovement: {
        ruleStates: "ÿ™ŸÜÿµ ÿßŸÑŸÇÿßÿπÿØÿ© ..."
      },
      trigger: {
        actionThatFires: "ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ° ÿßŸÑÿ∞Ÿä Ÿäÿ∑ŸÑŸÇ ÿßŸÑÿ™ŸÜÿ®ŸäŸá.",
        addAnother: "ÿ£ÿ∂ŸÅ ÿ¢ÿÆÿ±...",
        anyDynamic: "ÿ£Ÿä %{count}",
        anyDynamicdots: "ÿ£Ÿä %{count}...",
        anyLine: "ÿ£Ÿä ÿÆÿ∑",
        selectDynamic: "ÿßÿÆÿ™ÿ± %{count}(s)",
        selectLine: "ÿ≠ÿØÿØ ÿßŸÑÿÆÿ∑",
        triggerDialog: {
          addItem: "ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÜÿßÿµÿ±",
          cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
          errorOccured: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£.",
          wantToFind: "ÿßŸÜÿß ÿßÿ±ŸäÿØ ÿßŸÜ ÿßÿ¨ÿØ..."
        }
      },
      vesselEvents: {
        ruleStates: "ÿ™ŸÜÿµ ÿßŸÑŸÇÿßÿπÿØÿ© ...",
        selectBerth: "ÿßÿÆÿ™ÿ± ÿßŸÑŸàŸÑÿßÿØÿßÿ™.",
        selectRuleType: "ÿ≠ÿØÿØ ŸÜŸàÿπ ÿßŸÑŸÇÿßÿπÿØÿ©."
      }
    },
    main: {
      components: {
        ruleItem: {
          actions: {
            label: {
              cancel: "ŸäŸÑÿ∫Ÿä",
              unsubscribe: "ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ"
            }
          },
          ruleItem: {
            priority: "ÿ£ŸÅÿ∂ŸÑŸäÿ©"
          },
          unsubscribeTarget: {
            dialog: {
              children: "ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸÉ ÿ™ÿ±ŸäÿØ ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ŸÖŸÜ %{count}?",
              title: "ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿü"
            },
            unsbuscribe: "ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ"
          }
        }
      },
      mainJsx: {
        actions: {
          label: {
            cancel: "ŸäŸÑÿ∫Ÿä",
            delete: "ŸÜÿπŸÖ ÿå ÿßÿ≠ÿ∞ŸÅ"
          }
        },
        createButton: {
          createNewRule: "ÿ•ŸÜÿ¥ÿßÿ° ŸÇÿßÿπÿØÿ© ÿ¨ÿØŸäÿØÿ© ‚è∑"
        },
        rulesFilters: {
          dialog: {
            content: "ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸÉ ÿ™ÿ±ŸäÿØ ÿ≠ÿ∞ŸÅ Ÿáÿ∞Ÿá ÿßŸÑŸÇÿßÿπÿØÿ©ÿü",
            title: "ÿ≠ÿ∞ŸÅ ÿßŸÑŸÇÿßÿπÿØÿ©"
          },
          filterBy: "ŸÖÿµŸÜŸÅ ÿ®Ÿàÿßÿ≥ÿ∑ÿ©...",
          listItem: {
            createdby: {
              primaryText: "ÿßŸÜÿ¥ÿ£ ŸÖŸÜ ŸÇÿ®ŸÑ"
            },
            triggerList: {
              nestedItems: {
                checkbox: {
                  label: {
                    arrivals: "ÿßŸÑŸàÿµŸàŸÑ",
                    berthUpdates: "ÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ÿßŸÑÿ±ÿµŸäŸÅ",
                    cross: "ÿ™ÿπÿ®ÿ±",
                    departures: "ÿßŸÑŸÖÿ∫ÿßÿØÿ±ŸäŸÜ",
                    enter: "ŸäÿØÿÆŸÑ",
                    exit: "ŸÖÿÆÿ±ÿ¨",
                    loiter: "ŸÑŸàÿ™ÿ±",
                    newRequest: "ÿ∑ŸÑÿ® ÿ¨ÿØŸäÿØ",
                    requestApproval: "ÿ∑ŸÑÿ® ÿßŸÑŸÖŸàÿßŸÅŸÇÿ©",
                    securityViolations: "ÿßŸÑÿßŸÜÿ™ŸáÿßŸÉÿßÿ™ ÿßŸÑÿ£ŸÖŸÜŸäÿ©"
                  }
                }
              },
              primaryText: "ÿßÿ´ÿßÿ±"
            }
          },
          rulesAreas: {
            TypeAheadFilterContainer: {
              placeholder: "ÿßŸÜÿß ÿßÿ±ŸäÿØ ÿßŸÜ ÿßÿ¨ÿØ..."
            },
            rulesSectionWrapper: {
              noRules: "ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ŸÇŸàÿßÿπÿØ ŸÖÿ¥ÿ™ÿ±ŸÉÿ© ŸÖÿπŸÉ ŸÅŸä ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ≠ÿßŸÑŸä.",
              ruleSectionTitle: "ÿßŸÑŸÇÿßÿπÿØÿ© ÿ£ŸÜÿß ÿÆŸÑŸÇÿ™ (%{count})",
              ruleShared: "ÿ≠ŸÉŸÖ ŸÖÿ¥ÿ™ÿ±ŸÉÿ© ŸÖÿπŸä (%{count})",
              rulesContainer: "ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ŸÇŸàÿßÿπÿØ ŸÖÿ¥ÿ™ÿ±ŸÉÿ© ŸÖÿπŸÉ ŸÅŸä ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ≠ÿßŸÑŸä.",
              rulesSectionTitle: "ÿµŸÜÿπÿ™ (%{count})",
              rulesShared: "ÿßŸÑŸÇŸàÿßÿπÿØ ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉÿ© ŸÖÿπŸä (%{count})"
            }
          }
        },
        rulesOptions: {
          label: {
            alarmRule: "ÿ≠ŸÉŸÖ ÿßŸÑÿ•ŸÜÿ∞ÿßÿ±",
            eventCreated: "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≠ÿØÿ´",
            trackMovement: "ÿ™ÿ™ÿ®ÿπ ÿßŸÑÿ≠ÿ±ŸÉÿ©",
            vesselEventRule: "ŸÇÿßÿπÿØÿ© ÿ≠ÿØÿ´ ÿßŸÑÿ≥ŸÅŸäŸÜÿ©"
          }
        }
      }
    },
    viewRule: {
      actions: {
        flatButtonLabel: {
          cancel: "ŸäŸÑÿ∫Ÿä",
          yesDelete: "ŸÜÿπŸÖ ÿå ÿßÿ≠ÿ∞ŸÅ"
        }
      },
      alertAudio: {
        alert: "ÿßŸÜÿ∞ÿßÿ±",
        followedBy: "ŸÖÿ™ÿ®ŸàÿπŸãÿß ÿ®ŸÜÿµ ÿ•ÿ¥ÿπÿßÿ± ÿßŸÑÿ™ŸÜÿ®ŸäŸá.",
        speak: "Ÿäÿ™ŸÉŸÑŸÖ",
        speakAlert: "ŸÜÿ∑ŸÇ ŸÜÿµ ÿ•ÿ¥ÿπÿßÿ± ÿßŸÑÿ™ŸÜÿ®ŸäŸá."
      },
      alertTable: {
        alertAudio: "ÿµŸàÿ™ ÿßŸÑÿ™ŸÜÿ®ŸäŸá",
        alertDismissRule: "ÿ™ŸÜÿ®ŸäŸá ÿ±ŸÅÿ∂ ÿßŸÑŸÇÿßÿπÿØÿ©",
        raisedButton: {
          save: "Ÿäÿ≠ŸÅÿ∏"
        },
        tbody: {
          unsharedRuleMessage: {
            rule: "ŸÑÿß Ÿäÿ™ŸÖ ÿ≠ÿßŸÑŸäŸãÿß ŸÖÿ¥ÿßÿ±ŸÉÿ© Ÿáÿ∞Ÿá ÿßŸÑŸÇÿßÿπÿØÿ© ŸÖÿπ ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ¢ÿÆÿ±ŸäŸÜ.",
            whoGetsAlerts: "ŸÖŸÜ ÿßŸÑÿ∞Ÿä Ÿäÿ™ŸÑŸÇŸâ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ÿü"
          }
        },
        thead: {
          emails: "ÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä",
          priority: "ÿ£ŸÅÿ∂ŸÑŸäÿ©",
          system: "ŸÜÿ∏ÿßŸÖ",
          whoGetsAlerts: "ŸÖŸÜ ÿßŸÑÿ∞Ÿä Ÿäÿ™ŸÑŸÇŸâ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ÿü"
        }
      },
      dialog: {
        content: "ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸÉ ÿ™ÿ±ŸäÿØ ÿ≠ÿ∞ŸÅ Ÿáÿ∞Ÿá ÿßŸÑŸÇÿßÿπÿØÿ©ÿü",
        title: "ÿ≠ÿ∞ŸÅ ÿßŸÑŸÇÿßÿπÿØÿ©"
      },
      dismissText: {
        dismissAlertsOrg: "ÿ±ŸÅÿ∂ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ŸÅŸä ÿßŸÑŸÖÿ§ÿ≥ÿ≥ÿ©.",
        dismissAlertsUser: "ÿ±ŸÅÿ∂ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ ŸÖŸÜ ŸÇÿ®ŸÑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ."
      },
      ruleOperations: {
        delete: "ÿ≠ÿ∞ŸÅ",
        edit: "ÿ™ÿπÿØŸäŸÑ"
      },
      ruleStates: {
        theRuleStates: "ÿ™ŸÜÿµ ÿßŸÑŸÇÿßÿπÿØÿ© ..."
      },
      viewRuleAttribute: {
        alertDismissRule: "ÿ™ŸÜÿ®ŸäŸá ÿ±ŸÅÿ∂ ÿßŸÑŸÇÿßÿπÿØÿ©"
      },
      viewTitling: {
        createdBy: "ÿßŸÜÿ¥ÿ£ ŸÖŸÜ ŸÇÿ®ŸÑ %{count}"
      }
    }
  }
};